name: Deploy
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: string

jobs:
  verify-image:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Check image exists
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
        run: |
          echo "$YC_OAUTH_TOKEN" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex
          
          IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
          if docker manifest inspect $REGISTRY/app:$IMAGE_TAG > /dev/null; then
            echo "Image $REGISTRY/app:$IMAGE_TAG exists"
          else
            echo "Error: Image $REGISTRY/app:$IMAGE_TAG not found!"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: verify-image
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ Docker
            sudo chmod 666 /var/run/docker.sock || true
            
            echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login \
              --username oauth \
              --password-stdin \
              cr.yandex
            
            IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
            docker pull ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            docker stop app || true
            docker rm app || true
            
            docker run -d \
              --name app \
              -p 3000:3000 \
              ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            sleep 5
            docker ps --filter "name=app" --format "table {{.Names}}\t{{.Status}}"
            echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$(curl -s ifconfig.me):3000/hw/store"
      - name: Add deployment comment to issue
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub API –≤–º–µ—Å—Ç–æ gh CLI
              BASE_VERSION=$(echo "${{ github.event.inputs.release_version }}" | sed 's/_fix.*//')
              
              # –ü–æ–∏—Å–∫ issue —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GitHub API
              RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?state=all")
              
              # –ò—â–µ–º issue —Å –Ω—É–∂–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
              ISSUE_ID=$(echo "$RESPONSE" | jq -r --arg title "Release v$BASE_VERSION" '.[] | select(.title == $title) | .number')
              
              if [ -z "$ISSUE_ID" ]; then
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ issue
                NEW_ISSUE=$(curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github+json" \
                  -d '{"title":"Release v'$BASE_VERSION'", "body":"Automatic issue created for deployment tracking"}' \
                  "https://api.github.com/repos/${{ github.repository }}/issues")
                ISSUE_ID=$(echo "$NEW_ISSUE" | jq -r '.number')
                echo "Created new issue #$ISSUE_ID"
              fi
              
              # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              COMMENT="üöÄ **Deployed to production**\n\n"\
                      "**Release version:** ${{ github.event.inputs.release_version }}\n"\
                      "**Docker image:** ${{ env.REGISTRY }}/app:${{ github.event.inputs.release_version }}_latest\n"\
                      "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n"\
                      "**Deployed by:** ${{ github.actor }}\n"\
                      "**Access URL:** http://${{ secrets.VM_IP }}:3000/hw/store"
              
              # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è JSON
              ESCAPED_COMMENT=$(echo "$COMMENT" | jq -Rs .)
              
              # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ API
              curl -s -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -d '{"body":'"$ESCAPED_COMMENT"'}' \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_ID/comments"
              
              echo "Added deployment comment to issue #$ISSUE_ID"