name: Deploy
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Версия релиза для деплоя'
        required: true
        type: string

jobs:
  verify-image:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Check image exists
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
        run: |
          echo "$YC_OAUTH_TOKEN" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex
          
          IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
          if docker manifest inspect $REGISTRY/app:$IMAGE_TAG > /dev/null; then
            echo "Image $REGISTRY/app:$IMAGE_TAG exists"
          else
            echo "Error: Image $REGISTRY/app:$IMAGE_TAG not found!"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: verify-image
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login \
              --username oauth \
              --password-stdin \
              cr.yandex
            
            IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
            docker pull ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            sudo docker stop app || true
            sudo docker rm app || true
            
            sudo docker run -d \
              --name app \
              -p 3000:3000 \
              ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            sleep 5
            sudo docker ps --filter "name=app" --format "table {{.Names}}\t{{.Status}}"
      - name: Add deployment comment to issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          type -p gh >/dev/null || sudo apt-get install -y gh
          
          gh auth login --with-token <<< "$GITHUB_TOKEN"
          
          BASE_VERSION=$(echo "${{ github.event.inputs.release_version }}" | sed 's/_fix.*//')
          
          ISSUE_ID=$(gh issue list --search "Release v${BASE_VERSION}" --json number -q '.[0].number' 2>/dev/null)
          
          if [ -z "$ISSUE_ID" ]; then
            echo "::warning::Release issue for v${BASE_VERSION} not found!"
            ISSUE_ID=$(gh issue create \
              --title "Deployment of v${BASE_VERSION}" \
              --body "Automatic issue created for deployment tracking" \
              --json number -q '.number')
            echo "Created new issue #$ISSUE_ID"
          fi
          
          COMMENT="🚀 **Deployed to production**\n\n"\
                  "**Release version:** ${{ github.event.inputs.release_version }}\n"\
                  "**Docker image:** ${{ env.REGISTRY }}/app:${{ github.event.inputs.release_version }}_latest\n"\
                  "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n"\
                  "**Deployed by:** ${{ github.actor }}\n"\
                  "**Access URL:** http://${{ secrets.VM_IP }}:3000/hw/store"
          
          gh issue comment $ISSUE_ID --body "$COMMENT"
          
          echo "Added deployment comment to issue #$ISSUE_ID"