name: Hotfix
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to fix'
        required: true

jobs:
  hotfix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
      FIX_NUMBER: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: releases/${{ inputs.release_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Запуск проверок
      - run: npm ci
      - run: npm run lint
      - run: npm run test

      # Сборка и загрузка Docker-образа - УБРАНЕНО ПЕРЕОПРЕДЕЛЕНИЕ REGISTRY
      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
        run: |
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex
          docker build -t $REGISTRY/app:${{ inputs.release_version }}_fix$FIX_NUMBER .
          docker tag $REGISTRY/app:${{ inputs.release_version }}_fix$FIX_NUMBER $REGISTRY/app:${{ inputs.release_version }}_latest
          docker push $REGISTRY/app:${{ inputs.release_version }}_fix$FIX_NUMBER
          docker push $REGISTRY/app:${{ inputs.release_version }}_latest

      # Создание тега
      - name: Create fix tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag v${{ inputs.release_version }}_fix$FIX_NUMBER
          git push origin v${{ inputs.release_version }}_fix$FIX_NUMBER

      # Исправленный шаг добавления комментария
      - name: Add comment to release issue
        uses: actions/github-script@v6
        with:
          script: |
            const releaseVersion = "${{ github.event.inputs.release_version }}";
            const fixNumber = "${{ github.run_number }}";
            
            // Получаем список тегов
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Ищем предыдущий тег (релиз или фикс)
            const prevTag = tags.find(tag => 
              tag.name.startsWith(`v${releaseVersion}_fix`) || 
              tag.name === `v${releaseVersion}`
            );
            
            // Получаем коммиты с момента предыдущего тега
            let commitMessages = [];
            if (prevTag) {
              const compare = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: prevTag.name,
                head: 'releases/' + releaseVersion
              });
              commitMessages = compare.data.commits.map(c => c.commit.message.split('\n')[0]);
            } else {
              // Если не нашли предыдущий тег, берем все коммиты в ветке релиза
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: 'releases/' + releaseVersion
              });
              commitMessages = commits.data.map(c => c.commit.message.split('\n')[0]);
            }
            
            // Поиск Issue релиза
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });
            
            const releaseIssue = issues.find(issue => 
              issue.title.includes(`Release ${releaseVersion}`) || 
              issue.title.includes(`v${releaseVersion}`)
            );
            
            if (releaseIssue) {
              console.log(`Found release issue: #${releaseIssue.number} - ${releaseIssue.title}`);
            
              const commentBody = `**Hotfix applied!**\n\n` +
                `**Version:** ${releaseVersion}_fix${fixNumber}\n\n` +
                `**Author:** ${context.actor}\n\n` +
                `**Commits since last release/fix:**\n${commitMessages.map(m => '- ' + m).join('\n')}\n\n` +
                `**Image:** ${process.env.REGISTRY}/app:${releaseVersion}_fix${fixNumber}\n\n` +
                `**Date:** ${new Date().toISOString()}`;
            
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: releaseIssue.number,
                body: commentBody
              });
              console.log(`Comment added to issue #${releaseIssue.number}`);
            } else {
              console.error(`Release issue for version ${releaseVersion} not found!`);
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Hotfix for Release ${releaseVersion}`,
                body: `⚠️ Original release issue not found!\n\n` +
                      `**Hotfix version:** ${releaseVersion}_fix${fixNumber}\n\n` +
                      `**Author:** ${context.actor}\n\n` +
                      `**Commits:**\n${commitMessages.map(m => '- ' + m).join('\n')}\n\n` +
                      `**Image:** ${process.env.REGISTRY}/app:${releaseVersion}_fix${fixNumber}`
              });
              console.log(`Created new issue: #${newIssue.data.number}`);
            }