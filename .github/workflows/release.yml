name: Release
on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run test

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git pull origin main
          git switch -c releases/${{ steps.set-version.outputs.VERSION }}
          git push -u origin releases/${{ steps.set-version.outputs.VERSION }}

      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
        run: |
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin cr.yandex
          docker build -t ${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }} .
          docker tag ${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }} \
            ${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }}_latest
          docker push ${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }}
          docker push ${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }}_latest

      - name: Determine last release tag
        id: find_prev
        run: |
          PREV=$(git tag --list 'v*' --sort=-v:refname | grep -v '_fix' | head -n 1)
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV"

      - name: Create Git tag
        run: |
          git tag v${{ steps.set-version.outputs.VERSION }}
          git push origin v${{ steps.set-version.outputs.VERSION }}

      - name: Build and update changelog
        id: build_changelog
        env:
          VERSION: ${{ steps.set-version.outputs.VERSION }}
          PREV: ${{ steps.find_prev.outputs.previous_tag }}
        run: |
          if [ -z "${PREV}" ]; then
            LOG=$(git log main --pretty=format:"- %s" --no-merges | grep -v "CHANGELOG" | grep -v "Update dependencies")
          else
            LOG=$(git log ${PREV}..HEAD --pretty=format:"- %s" --no-merges | grep -v "CHANGELOG" | grep -v "Update dependencies")
          fi
          
          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          {
            echo "## v${VERSION} â€” $(date -u +'%Y-%m-%d')"
            echo ""
            echo "$LOG"
            echo ""
            cat CHANGELOG.md 2>/dev/null || echo ""
          } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v${VERSION}"
          git push origin releases/${VERSION}

      - name: Create GitHub Issue
        env:
          VERSION: ${{ steps.set-version.outputs.VERSION }}
        run: |
          type -p gh >/dev/null || sudo apt-get install -y gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
          ISSUE_BODY=$(cat <<EOF
          ## Release v${VERSION}ðŸ’«
          
          **Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Author:** ${{ github.actor }}
          **Docker image:** \`${{ env.REGISTRY }}/app:${{ steps.set-version.outputs.VERSION }}\`
          
          **Changes:**
          ${{ env.CHANGELOG_BODY }}
          EOF
          )
          
          gh issue create \
            --title "Release v${VERSION}" \
            --body "$ISSUE_BODY" \
            --label "release"