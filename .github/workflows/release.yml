name: Release
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
      VERSION: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Запуск проверок
      - run: npm ci
      - run: npm run lint
      - run: npm run test

      # Создание релизной ветки
      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION

      # Сборка и загрузка Docker-образа - УБРАНО ПЕРЕОПРЕДЕЛЕНИЕ REGISTRY
      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
        run: |
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex
          docker build -t $REGISTRY/app:$VERSION .
          docker tag $REGISTRY/app:$VERSION $REGISTRY/app:${VERSION}_latest
          docker push $REGISTRY/app:$VERSION
          docker push $REGISTRY/app:${VERSION}_latest

      # Создание тега
      - name: Create tag
        run: |
          git tag v$VERSION
          git push origin v$VERSION

      # Исправленный шаг создания Issue и CHANGELOG
      - name: Create release artifacts
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Получаем все теги
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              // Находим последний релизный тег (начинается с 'v' без 'fix')
              const releaseTags = tags.filter(tag => 
                tag.name.startsWith('v') && !tag.name.includes('fix')
              );

              // Сортируем по номеру версии
              releaseTags.sort((a, b) => {
                const numA = parseInt(a.name.substring(1));
                const numB = parseInt(b.name.substring(1));
                return numB - numA;
              });

              let lastReleaseTag = releaseTags.length > 0 ? releaseTags[0].name : null;
              let commitMessages = [];

              if (lastReleaseTag) {
                // Получаем коммиты между последним релизом и текущим main
                const compare = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: lastReleaseTag,
                  head: 'main'
                });
                commitMessages = compare.data.commits.map(c => 
                  c.commit.message.split('\n')[0]
                ).filter(msg => !msg.includes("Merge branch"));
              } else {
                // Для первого релиза берем все коммиты
                const commits = await github.paginate(
                  github.rest.repos.listCommits,
                  {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    sha: 'main',
                    per_page: 100
                  }
                );
                commitMessages = commits.map(c => 
                  c.commit.message.split('\n')[0]
                ).filter(msg => !msg.includes("Merge branch"));
              }

              // Фильтруем коммиты, связанные с релизом
              const filteredCommits = commitMessages.filter(msg => 
                !msg.toLowerCase().includes("changelog") &&
                !msg.toLowerCase().includes("release") &&
                !msg.startsWith("Merge pull request")
              );

              // Создаем Issue
              const issueBody = `**Version:** ${process.env.VERSION}\n\n` +
                               `**Author:** ${context.actor}\n\n` +
                               `**Commits since last release:**\n${filteredCommits.map(m => '- ' + m).join('\n')}\n\n` +
                               `**Image:** ${process.env.REGISTRY}/app:${process.env.VERSION}\n\n` +
                               `**Date:** ${new Date().toISOString()}`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.VERSION}`,
                body: issueBody
              });
              console.log(`Created issue #${issue.data.number}`);

              // Обновляем CHANGELOG.md
              const fs = require('fs');
              let changelog = '';
              if (fs.existsSync('CHANGELOG.md')) {
                changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              }

              const newEntry = `# v${process.env.VERSION}\n\n` +
                              `${filteredCommits.map(m => '- ' + m).join('\n')}\n\n`;
              fs.writeFileSync('CHANGELOG.md', newEntry + changelog);

              // Коммитим изменения
              const { execSync } = require('child_process');
              execSync('git config user.name "GitHub Actions"');
              execSync('git config user.email "actions@github.com"');
              execSync('git add CHANGELOG.md');
              execSync(`git commit -m "Update CHANGELOG for v${process.env.VERSION}"`);
              execSync(`git push origin releases/${process.env.VERSION}`);

            } catch (error) {
              console.error('Error creating release artifacts:', error);
              // Fallback: создать минимальный релиз
              const fs = require('fs');
              const minimalChangelog = `# v${process.env.VERSION}\n\nRelease ${process.env.VERSION}\n\n`;
              if (fs.existsSync('CHANGELOG.md')) {
                const current = fs.readFileSync('CHANGELOG.md', 'utf8');
                fs.writeFileSync('CHANGELOG.md', minimalChangelog + current);
              } else {
                fs.writeFileSync('CHANGELOG.md', minimalChangelog);
              }

              // Коммитим fallback
              const { execSync } = require('child_process');
              execSync('git config user.name "GitHub Actions"');
              execSync('git config user.email "actions@github.com"');
              execSync('git add CHANGELOG.md');
              execSync(`git commit -m "Add minimal CHANGELOG for v${process.env.VERSION}"`);
              execSync(`git push origin releases/${process.env.VERSION}`);

              throw new Error('Partial success: Created minimal release due to errors');
            }