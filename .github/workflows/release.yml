name: Release
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: cr.yandex/${{ secrets.REGISTRY_ID }}
      VERSION: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Запуск проверок
      - run: npm ci
      - run: npm run lint
      - run: npm run test

      # Создание релизной ветки
      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION

      # Сборка и загрузка Docker-образа
      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
          REGISTRY: ${{ secrets.REGISTRY_ID }}
          VERSION: ${{ github.run_number }}
        run: |
          # Прямая аутентификация через Docker
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex

          # Сборка и публикация
          docker build -t $REGISTRY/app:$VERSION .
          docker tag $REGISTRY/app:$VERSION $REGISTRY/app:${VERSION}_latest
          docker push $REGISTRY/app:$VERSION
          docker push $REGISTRY/app:${VERSION}_latest

      # Создание тега
      - name: Create tag
        run: |
          git tag v$VERSION
          git push origin v$VERSION

      # Создание Issue и обновление CHANGELOG
      - name: Create release issue
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Получаем список тегов
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Ищем предыдущий тег (релиз или фикс)
              const prevTag = tags.find(tag => 
                tag.name.startsWith(`v${releaseVersion}_fix`) || 
                tag.name === `v${releaseVersion}`
              );
              
              // Получаем коммиты с момента предыдущего тега
              let commitMessages = [];
              if (prevTag) {
                const compare = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: prevTag.name,
                  head: 'releases/' + releaseVersion
                });
                commitMessages = compare.data.commits.map(c => c.commit.message.split('\n')[0]);
              } else {
                // Если не нашли предыдущий тег, берем все коммиты в ветке релиза
                const commits = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: 'releases/' + releaseVersion
                });
                commitMessages = commits.data.map(c => c.commit.message.split('\n')[0]);
              }
            
              // Создаем Issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.VERSION}`,
                body: `**Version:** ${process.env.VERSION}\n\n` +
                      `**Author:** ${context.actor}\n\n` +
                      `**Commits since last release/fix:**\n${commitMessages.map(m => '- ' + m).join('\n')}\n\n` +
                      `**Image:** ${process.env.REGISTRY}/app:${process.env.VERSION}`
                      `**Date:** ${new Date().toISOString()}`
              });
            
              // Обновляем CHANGELOG.md
              const fs = require('fs');
              let changelog = fs.existsSync('CHANGELOG.md') ? fs.readFileSync('CHANGELOG.md', 'utf8') : '';
              const newEntry = `# v${process.env.VERSION}\n\n` +
                              `${commits.map(c => '- ' + c.commit.message.split('\n')[0]).join('\n')}\n\n`;
              fs.writeFileSync('CHANGELOG.md', newEntry + changelog);
            
              // Коммитим изменения
              const { execSync } = require('child_process');
              execSync('git config user.name "GitHub Actions"');
              execSync('git config user.email "actions@github.com"');
              execSync('git add CHANGELOG.md');
              execSync(`git commit -m "Update CHANGELOG for v${process.env.VERSION}"`);
              execSync(`git push origin releases/${process.env.VERSION}`);
            
            } catch (error) {
              console.error('Error creating release:', error);
              throw error;
            }