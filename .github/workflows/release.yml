name: Release
on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run test

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git pull origin main
          git switch -c releases/${{ steps.set-version.outputs.VERSION }}
          git push -u origin releases/${{ steps.set-version.outputs.VERSION }}

      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
        run: |
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin cr.yandex
          docker build -t $REGISTRY/app:${{ steps.set-version.outputs.VERSION }} .
          docker tag $REGISTRY/app:${{ steps.set-version.outputs.VERSION }} $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}_latest
          docker push $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}
          docker push $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}_latest

      - name: Determine last release tag
        id: find_prev
        run: |
          PREV=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag v${{ steps.set-version.outputs.VERSION }}
          git push origin v${{ steps.set-version.outputs.VERSION }}

      - name: Build and update changelog
        id: build_changelog
        env:
          VERSION: ${{ steps.set-version.outputs.VERSION }}
          PREV: ${{ steps.find_prev.outputs.previous_tag }}
        run: |
          if [ -z "${PREV}" ]; then
            LOG=$(git log main --pretty=format:"- %h: %s" --no-merges)
          else
            LOG=$(git log ${PREV}..v${VERSION} --pretty=format:"- %h: %s" --no-merges || echo "- Нет новых коммитов")
          fi
          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          {
            echo "## v${VERSION} — $(date +'%Y-%m-%d')"
            echo ""
            echo "${{ env.CHANGELOG_BODY }}"
            echo ""
            cat CHANGELOG.md 2>/dev/null
          } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for v${VERSION}" || echo "No changes to changelog"
          git push origin releases/${VERSION}

      - name: Open PR to main for CHANGELOG
        run: |
          gh auth login --with-token <<< "${{ secrets.PAT_TOKEN }}"
          gh pr create \
            --base main \
            --head releases/${VERSION} \
            --title "Release v${VERSION}: update CHANGELOG" \
            --body "Automated PR to merge updated CHANGELOG for v${VERSION}"

      - name: Create GitHub Issue for Release Notes
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          ISSUE_BODY=$(printf "## Release v%s\n\n**Date:** %s\n**Author:** %s\n**Docker image:** `%s:%s`\n\n**Commits:**\n%s" \
            "${VERSION}" \
            "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            "${{ github.actor }}" \
            "cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app" \
            "${VERSION}" \
            "${{ env.CHANGELOG_BODY }}")
          gh issue create \
            --title "Release v${VERSION}" \
            --body "$ISSUE_BODY" \
            --label "release"