name: Release
on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - run: npm run test

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: write
      issues: write
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b releases/${{ steps.set-version.outputs.VERSION }}
          git push origin releases/${{ steps.set-version.outputs.VERSION }}

      - name: Build and push Docker image
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}
        run: |
          echo "$YC_SA_KEY" | docker login \
            --username json_key \
            --password-stdin cr.yandex
          docker build -t $REGISTRY/app:${{ steps.set-version.outputs.VERSION }} .
          docker tag $REGISTRY/app:${{ steps.set-version.outputs.VERSION }} $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}_latest
          docker push $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}
          docker push $REGISTRY/app:${{ steps.set-version.outputs.VERSION }}_latest

      - name: Create Git tag
        run: |
          git tag v${{ steps.set-version.outputs.VERSION }}
          git push origin v${{ steps.set-version.outputs.VERSION }}

      - name: Create issue and update changelog
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            const version = '${{ steps.set-version.outputs.VERSION }}';
            const registry = '${{ env.REGISTRY }}';
            const author = context.actor;

            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const releaseTags = tags
              .filter(tag => tag.name.startsWith('v') && !tag.name.includes('fix'))
              .sort((a, b) => parseInt(b.name.substring(1)) - parseInt(a.name.substring(1)));

            let commitMessages = [];
            let baseTag = releaseTags[0]?.name;

            if (baseTag) {
              const compare = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: baseTag,
                head: 'main'
              });
              commitMessages = compare.data.commits.map(c => c.commit.message.split('\n')[0])
                .filter(msg => !msg.startsWith('Merge'));
            } else {
              const commits = await github.paginate(github.rest.repos.listCommits, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: 'main',
                per_page: 100
              });
              commitMessages = commits.map(c => c.commit.message.split('\n')[0])
                .filter(msg => !msg.startsWith('Merge'));
            }

            const changelogEntry = `# v${version}\n\n` +
              commitMessages.map(msg => `- ${msg}`).join('\n') + '\n\n';

            const changelogPath = 'CHANGELOG.md';
            let previous = fs.existsSync(changelogPath) ? fs.readFileSync(changelogPath, 'utf8') : '';
            fs.writeFileSync(changelogPath, changelogEntry + previous);

            execSync('git config user.name "GitHub Actions"');
            execSync('git config user.email "actions@github.com"');
            execSync('git add CHANGELOG.md');
            execSync(`git commit -m "Update CHANGELOG for v${version}"`);
            execSync(`git push origin releases/${version}`);

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${version}`,
              body:
                `**Version:** ${version}\n\n` +
                `**Author:** ${author}\n\n` +
                `**Date:** ${new Date().toISOString()}\n\n` +
                `**Commits since last release:**\n${env.COMMITS.map(m => `- ${m}`).join('\n')}\n\n` +
                `**Docker image:** \`${registry}/app:${version}\``
            });
